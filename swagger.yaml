swagger: "2.0"
info:
  description: "Minha Carteira API"
  version: "1.0.0"
  title: "Minha Carteira API"
  
produces:
- application/json
x-amazon-apigateway-policy:
  Version: "2012-10-17"
  Statement:
  - Effect: "Allow"
    Principal: "*"
    Action: "execute-api:Invoke"
    Resource: "*"

paths:
  /price/now:
    post:
      summary: Get single price of multiple stocks now
      consumes:
      - application/json

      parameters:
      - in: body
        name: body
        required: true
        schema:
          type: array
          items:
            type: string
      tags:
        - Stocks
      responses:
        200:
          description: Success
          schema:
            type: array
            items:
              $ref: '#/definitions/StockResponse'
        400:
          description: Bad Request
          schema:
            $ref: '#/definitions/ErrorResponse'

      x-amazon-apigateway-integration:
        type: aws_proxy
        httpMethod: POST
        uri:
          Fn::Sub: 'arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${StockPriceMultipleFunction.Arn}/invocations'

  /price/now/{stock}:
    get:
      summary: Get single stock price now
      parameters:
      - name: stock
        in: path
        required: true
        type: string
      tags:
        - Stocks
      responses:
        200:
          description: Success
          schema:
            $ref: '#/definitions/StockResponse'
        400:
          description: Bad Request
          schema:
            $ref: '#/definitions/ErrorResponse'
      x-amazon-apigateway-integration:
        type: aws_proxy
        httpMethod: POST
        uri:
          Fn::Sub: 'arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${StockPriceNowFunction.Arn}/invocations'

  /user:
    post:
      summary: Registers a new user
      description: Creates a new user.
      consumes:
        - application/json
      parameters:
        - in: body
          name: body
          required: true
          description: New user details.
          schema:
            $ref: '#/definitions/User'
      tags:
        - User

      responses:
        201:
          description: User was created.
          schema:
            $ref: '#/definitions/UserResponse'
        400:
          description: Bad request
          schema:
            $ref: '#/definitions/ErrorResponse'

      x-amazon-apigateway-integration:
        type: aws_proxy
        httpMethod: POST
        uri:
          Fn::Sub: 'arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${UserCrudFunction.Arn}/invocations'

  /user/{id}:
    get:
      summary: Get a user
      description: Get a user.
      parameters:
      - name: id
        in: path
        required: true
        type: string
      tags:
        - User
      responses:
        200:
          description: The username of the new user and set of temporary credentials
          schema:
            $ref: '#/definitions/UserResponse'
        404:
          description: Bad request
          schema:
            $ref: '#/definitions/ErrorResponse'

      x-amazon-apigateway-integration:
        type: aws_proxy
        httpMethod: POST
        uri:
          Fn::Sub: 'arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${UserCrudFunction.Arn}/invocations'
          
    put:
      summary: Update a user
      description: Update a user
      consumes:
        - application/json
      parameters:
      - name: id
        in: path
        required: true
        type: string
      tags:
        - User
      responses:
        200:
          description: User was updated.
          schema:
            $ref: '#/definitions/UserResponse'
        400:
          description: Bad request
          schema:
            $ref: '#/definitions/ErrorResponse'
        404:
          description: Not Found
          schema:
            $ref: '#/definitions/ErrorResponse'

      x-amazon-apigateway-integration:
        type: aws_proxy
        httpMethod: POST
        uri:
          Fn::Sub: 'arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${UserCrudFunction.Arn}/invocations'

    delete:
      summary: Delete a user.
      description: Delete a user.
      parameters:
      - name: id
        in: path
        required: true
        type: string
      tags:
        - User
      responses:
        204:
          description: The user was deleted.
        404:
          description: Not Found
          schema:
            $ref: '#/definitions/ErrorResponse'

      x-amazon-apigateway-integration:
        type: aws_proxy
        httpMethod: POST
        uri:
          Fn::Sub: 'arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${UserCrudFunction.Arn}/invocations'

  # /login:
  #   post:
  #     summary: Login user
  #     description: Verifies the given credentials against the user database and returns a set of new temporary credentials
  #     consumes:
  #       - application/json
  #     parameters:
  #       - in: body
  #         name: body
  #         description: New user details.
  #         schema:
  #           $ref: '#/definitions/User'
  #     tags:
  #       - Login

  #     responses:
  #       200:
  #         description: A new set of temporary credentials
  #         schema:
  #           $ref: '#/definitions/LoginSucceededResponse'
  #       400:
  #         description: Bad request
  #         schema:
  #           $ref: '#/definitions/ErrorResponse'

  #     x-amazon-apigateway-integration:
  #       type: aws_proxy
  #       httpMethod: POST
  #       uri:
  #         Fn::Sub: 'arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${UserLoginFunction.Arn}/invocations'

definitions:
  StockResponse:
    type: object
    required:
      - stock
      - price
      - timestamp
    properties:
      stock:
        type: string
      price:
        type: number
      timestamp:
        type: string

  ErrorResponse:
    type: object
    required:
      - message
    properties:
      message:
        type: string
        
  User:
    properties:
      username:
        type: string
        description: A unique username for the user
      email:
        type: string
        description: A unique email for the user
      password:
        type: string
        description: A password for the new user

  UserResponse:
    properties:
      id:
        type: string
        description: The user id
      username:
        type: string
        description: A unique username for the user
      email:
        type: string
        description: A unique email for the user


  LoginSucceededResponse:
    properties:
      token:
        type: string
        description: a login token
